<?php

namespace App\Exceptions;

use Illuminate\Auth\AuthenticationException;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Throwable;

class Handler extends ExceptionHandler
{
    /**
     * A list of exception types with their corresponding custom log levels.
     *
     * @var array<class-string<\Throwable>, \Psr\Log\LogLevel::*>
     */
    protected $levels = [
        //
    ];

    /**
     * A list of the exception types that are not reported.
     *
     * @var array<int, class-string<\Throwable>>
     */
    protected $dontReport = [
        //
    ];

    /**
     * A list of the inputs that are never flashed to the session on validation exceptions.
     *
     * @var array<int, string>
     */
    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     *
     * @return void
     */
    public function register()
    {
        $this->reportable(function (Throwable $e) {
            //
        });
    }

    public function render($request, Throwable $e): \Illuminate\Http\Response|JsonResponse|Response
    {
        if ($e instanceof ModelNotFoundException || $e instanceof NotFoundHttpException)
            return $this->NotFoundExceptionMessage($request, $e);

        if ($e instanceof MethodNotAllowedHttpException)
            return $this->MethodNotAllowedHttpExceptionMessage($request, $e);


        return parent::render($request, $e);
    }

    public function MethodNotAllowedHttpExceptionMessage(Request $request, $e): \Illuminate\Http\Response|JsonResponse|Response
    {
        return $request->acceptsJson() ? new JsonResponse([
            'data' => [
                'message' => [
                    'case' =>  ['method is not supported for this route.']
                ],
            ],
            'status' => 'error'
        ], Response::HTTP_METHOD_NOT_ALLOWED) : parent::render($request, $e); // TODO: Change the autogenerated stub;
    }

    public function NotFoundExceptionMessage(Request $request, $e): \Illuminate\Http\Response|JsonResponse|Response
    {
        return $request->acceptsJson() ? new JsonResponse([
            'data' => [
                'message' => [
                    'case' =>  [ 'not found']
                ],
            ],
            'status' => 'error'
        ], Response::HTTP_NOT_FOUND) : parent::render($request, $e); // TODO: Change the autogenerated stub;
    }

    protected function unauthenticated($request, AuthenticationException $exception): JsonResponse|Response|RedirectResponse
    {
        return $this->shouldReturnJson($request, $exception)
            ? response()->json(['data'=>['message' => ['user'=>['نیاز به احراز هویت']]],'status'=>'error'], Response::HTTP_UNAUTHORIZED)
            : redirect()->guest($exception->redirectTo() ?? route('login'));
    }
}
